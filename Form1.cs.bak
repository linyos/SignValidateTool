using System.Management.Automation;

namespace SignValidateTool
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            using (var dialog = new FolderBrowserDialog())
            {
                if (dialog.ShowDialog() == DialogResult.OK)
                {
                    txtDllFolder.Text = dialog.SelectedPath;
                }
            }
        }

        private void btnSelectSignTool_Click(object sender, EventArgs e)
        {
            using (var dialog = new OpenFileDialog())
            {
                dialog.Filter = "All files (*.*)|*.*";
                if (dialog.ShowDialog() == DialogResult.OK)
                {
                    txtSignToolPath.Text = dialog.FileName;
                }
            }
        }

        private void btnRunPowerShell_Click(object sender, EventArgs e)
        {
            txtOutput.Text = "";
            string dllFolder = txtDllFolder.Text;
            string signToolPath = txtSignToolPath.Text;

            if (!Directory.Exists(dllFolder) || !File.Exists(signToolPath))
            {
                MessageBox.Show("請確認路徑正確！", "錯誤", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }
            string signToolFolder = Path.GetDirectoryName(signToolPath);

            // PowerShell指令
            string psScript = @"
                $files = Get-ChildItem -Path '" + dllFolder + @"\*.dll'
                foreach($file in $files)
                {
                    Write-Output($file.PSPath)
                    cd '" + signToolFolder + @"'
                    $path = $file.FullName
                    Write-Output($path)

                    $result = .\SignDotNet.exe -verify `""$path`""
                    Write-Output($result)
                }";
            // 執行PowerShell指令
            using (PowerShell ps = PowerShell.Create())
            {
                ps.AddScript(psScript);
                try
                {
                    var results = ps.Invoke();
                    foreach (var result in results)
                    {
                        txtOutput.AppendText(result.ToString() + Environment.NewLine);
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show("執行失敗：" + ex.Message, "錯誤", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }

        }


        private void AppendText(string text)
        {
            if (txtOutput.InvokeRequired)
            {
                txtOutput.Invoke(new Action(() => AppendText(text)));
            }
            else
            {
                txtOutput.AppendText(text + Environment.NewLine);
            }
        }
    }
}